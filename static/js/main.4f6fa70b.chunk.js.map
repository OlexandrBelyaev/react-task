{"version":3,"sources":["components/SelectLanguage/SelectLanguage.jsx","components/Palette/Palette.jsx","components/SearchField/SearchField.jsx","components/Header/Header.jsx","components/WeatherChart/WeatherChart.jsx","components/WhetherCard/WhetherCard.jsx","components/CardList/CardList.jsx","App.js","index.js"],"names":["SelectLanguage","changeLanguage","lang","className","onChange","value","Palette","setBackgroundCard","map","color","index","onClick","SearchField","setSearchNameCity","localization","savedCards","JSON","parse","localStorage","getItem","style","width","Autocomplete","freeSolo","event","id","disableClearable","options","option","name","onInputChange","target","renderInput","params","TextField","label","placeholder","margin","variant","InputProps","type","Header","addCard","searchBitton","WeatherChart","props","chart","xaxis","categories","fill","colors","averageTemp","series","data","height","WhetherCard","whether","language","background","deleteCard","useState","temperatureSystem","changeSystem","main","Object","assign","weather","sys","wind","description","icon","temp_max","temp_min","convertToFarengate","Kelvin","Math","round","toString","convertToCelsy","celsy","country","src","alt","result","date","Date","getDay","getDate","getMonth","getHours","getMinutes","getActualDate","temp","href","feelsLike","feels_like","speed","humidity","pressure","CardList","chartBackground","console","log","card","defultProps","App","state","key","searchNameCity","en","ua","ru","loadData","fetch","then","response","json","setState","location","loadWhether","city","cod","setItem","stringify","e","setBackgroundChart","editedList","filter","_","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f6fa70b.chunk.js","sourcesContent":["import React from 'react';\nimport './SelectLanguage.scss';\n\nconst SelectLanguage = ({\n  changeLanguage,\n  lang,\n}) => {\n  return (\n    <select\n      className=\"SelectLanguage\"\n      onChange={changeLanguage}\n      value={lang}\n    >\n      <option value=\"en\">\n        EN\n      </option>\n      <option value=\"ua\">\n        UA\n      </option>\n      <option value=\"ru\">\n        RU\n      </option>\n    </select>\n  );\n}\n\nexport default SelectLanguage;\n","import React from 'react';\nimport './Palette.scss';\n\nconst Palette = ({ setBackgroundCard }) => {\n  const colorsOfButtons = ['#FFF1FE', '#F1F2FF', '#459DE9', '#F2F2F2', '#C5C5C5', '#8D8D8D'];\n  return (\n    <div className=\"Palette\">\n      Palette:\n      {\n        colorsOfButtons.map((color, index) => (\n          <button\n            key={`button${index}`}\n            className=\"Palette__buttons\"\n            onClick={setBackgroundCard({color})}\n          ></button>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default Palette;","/* eslint-disable no-use-before-define */\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nexport default function SearchField({ setSearchNameCity, localization, lang }) {\n  const savedCards = JSON.parse(localStorage.getItem(\"savedCards\"));\n  return (\n    <div style={{ width: 300 }}>\n      <Autocomplete\n        freeSolo\n        onChange={(event, value) => {\n          setSearchNameCity(value);\n        }}\n        id=\"free-solo-2-demo\"\n        disableClearable\n        options={savedCards.map((option) => option.name)}\n        onInputChange={(event) => {\n          setSearchNameCity(event.target.value);\n        }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={localization[lang].placeholder}\n            margin=\"none\"\n            variant=\"outlined\"\n            InputProps={{ ...params.InputProps, type: \"search\" }}\n          />\n        )}\n      />\n    </div>\n  );\n}","import React from 'react';\nimport './Header.scss';\nimport SelectLanguage from '../SelectLanguage/SelectLanguage';\nimport Palette from '../Palette/Palette';\nimport SearchField from '../SearchField/SearchField';\n\nconst Header = ({\n  localization,\n  setSearchNameCity,\n  addCard,\n  setBackgroundCard,\n  changeLanguage,\n  lang,\n}) => {\n  return (\n    <div className=\"Header\">\n      <div className=\"Header__search\">\n        <SearchField\n          setSearchNameCity={setSearchNameCity}\n          localization={localization}\n          lang={lang}\n        />\n        <button\n          className=\"Header__searchButton\"\n          type=\"button\"\n          onClick={addCard}\n        >\n          {localization[lang].searchBitton}\n        </button>\n      </div>\n      <div className=\"Header__modificators\">\n        <Palette\n          setBackgroundCard={setBackgroundCard}\n        />\n\n        <SelectLanguage\n          changeLanguage={changeLanguage}\n          lang={lang}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Chart from \"react-apexcharts\";\n\nconst WeatherChart = (props) => {\n  const options = {\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00']\n    },\n    fill: {\n      colors: props.averageTemp > 0 ? \"red\" : \"blue\",\n    }\n  };\n\n  const series = [\n    {\n      name: \"Temperature\",\n      data: [5, 7, 10, 11, 15, 8, 10, 9]\n    }\n  ];\n\nreturn (\n    <div className=\"app\">\n      <div className=\"row\">\n        <div className=\"mixed-chart\">\n          <Chart\n            options={options}\n            series={series}\n            type=\"area\"\n            width=\"300\"\n            height=\"150\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherChart;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './WhetherCard.css';\nimport WeatherChart from '../WeatherChart/WeatherChart';\n\nconst WhetherCard = ({\n  whether,\n  localization,\n  language,\n  background,\n  deleteCard,\n  id,\n}) => {\n  const [temperatureSystem, changeSystem] = useState('c');\n  const main = Object.assign({}, whether.main);\n  const weather = Object.assign({}, whether.weather);\n  const sys = Object.assign({}, whether.sys);\n  const wind = Object.assign({}, whether.wind);\n\n  const { description, icon } = Object.assign({}, weather[0]);\n  const averageTemp = (main.temp_max + main.temp_min) / 2;\n\n  const convertToFarengate = (Kelvin) => {\n    return Math.round(Kelvin * 9 / 5 - 459.67).toString();\n  };\n\n  const convertToCelsy = (Kelvin) => {\n    const celsy = Math.round(Kelvin - 273.15).toString();\n\n    return (celsy > 0) ? `+${celsy}` : celsy;\n  };\n\n  const getActualDate = () => {\n    const date = new Date();\n    let result;\n\n    switch (date.getDay()) {\n      case 0: result = 'Mon'; break;\n      case 1: result = 'Tue'; break;\n      case 2: result = 'Wed'; break;\n      case 3: result = 'Thi'; break;\n      case 4: result = 'Fri'; break;\n      case 5: result = 'Sat'; break;\n      case 6: result = 'Sun'; break;\n      default: break;\n    }\n\n    result += `, ${date.getDate()} `;\n\n    switch (date.getMonth()) {\n      case 0: result += 'January'; break;\n      case 1: result += 'February'; break;\n      case 2: result += 'March'; break;\n      case 3: result += 'April'; break;\n      case 4: result += 'May'; break;\n      case 5: result += 'June'; break;\n      case 6: result += 'Jule'; break;\n      case 7: result += 'August'; break;\n      case 8: result += 'September'; break;\n      case 9: result += 'October'; break;\n      case 10: result += 'November'; break;\n      case 11: result += 'December'; break;\n      default: break;\n    }\n\n    result += `, ${date.getHours()}:${date.getMinutes()}`;\n\n    return result;\n  };\n\n  return (\n    <div className=\"WhetherCard\" style={{ background: background.color }}>\n      <div className=\"WhetherCard__header\">\n        <div className=\"WhetherCard__city\">\n          {`${whether.name}, ${sys.country}`}\n        </div>\n        <div className=\"WhetherCard__iconWhether\">\n          <img\n            className=\"WhetherCard__icon\"\n            src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n            alt=\"weatherIcon\"\n          />\n          <div className=\"WhetherCard__whetherDescription\">\n            {description}\n          </div>\n          <button\n            className=\"WhetherCard__deleteCard\"\n            onClick={deleteCard(id)}\n          >\n              {`x`}\n            </button>\n        </div>\n      </div>\n      <div className=\"WhetherCard__date\">\n        {getActualDate()}\n      </div>\n      <div className=\"WhetherCard__chart\">\n        <WeatherChart\n          averageTemp={convertToCelsy(averageTemp)}\n        />\n      </div>\n      <div className=\"WhetherCard__templine\">\n        <div className=\"WhetherCard__tempcontainer\">\n          <div className=\"WhetherCard__tempToggle\">\n            {\n              temperatureSystem === 'c'\n                ? (\n                  <span className=\"WhetherCard__temp\">\n                    {\n                      convertToCelsy(main.temp)\n                    }\n                  </span>\n                )\n                : (\n                  <span className=\"WhetherCard__temp\">\n                    {\n                      convertToFarengate(main.temp)\n                    }\n                  </span>\n                )\n            }\n            <span\n              href=\"#1\"\n              className={\n                temperatureSystem === 'c'\n                  ? 'WhetherCard__temptype-active'\n                  : 'WhetherCard__temptype'\n              }\n              onClick={() => {\n                changeSystem('c');\n              }}\n            >\n              ℃\n            </span>\n            {` | `}\n            <span\n              href=\"#1\"\n              className={\n                temperatureSystem === 'f'\n                  ? 'WhetherCard__temptype-active'\n                  : 'WhetherCard__temptype'\n              }\n              onClick={() => {\n                changeSystem('f');\n              }}\n            >\n              ℉\n            </span>\n          </div>\n          <div className=\"WhetherCard__feelslike\">\n            {\n              temperatureSystem === 'c'\n                ? `${localization[language].feelsLike} ${\n                  convertToCelsy(main.feels_like)\n                }℃`\n                : `${localization[language].feelsLike} ${\n                  convertToFarengate(main.feels_like)\n                }℉`\n            }\n          </div>\n        </div>\n        <div>\n          <div className=\"WhetherCard__additional\">\n            <div>\n              {`${localization[language].wind}: `}\n              <b className=\"WhetherCard__additional-blue\">{`${wind.speed} m/s`}</b>\n            </div>\n            <div>\n              {`${localization[language].humidity}:`}\n              <b className=\"WhetherCard__additional-blue\">{` ${main.humidity}`}</b>\n            </div>\n            <div>\n              {`${localization[language].pressure}:`}\n              <b className=\"WhetherCard__additional-blue\">{` ${main.pressure}`}</b>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nWhetherCard.propTypes = {\n  whether: PropTypes.object.isRequired,\n  localization: PropTypes.object.isRequired,\n  language: PropTypes.string.isRequired,\n  background: PropTypes.shape({\n    color: PropTypes.string.isRequired,\n  }).isRequired,\n  deleteCard: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default WhetherCard;\n","import React from 'react';\nimport './CardList.css';\nimport PropTypes from 'prop-types';\nimport WhetherCard from '../WhetherCard/WhetherCard';\n\nconst CardList = ({\n  savedCards,\n  localization,\n  language,\n  background,\n  deleteCard,\n  chartBackground,\n}) => {\n\n  console.log(background);\n  return (\n    <div className=\"CardList\">\n      {\n        savedCards.map((card, index) =>\n          <WhetherCard\n            key={index}\n            whether={card}\n            localization={localization}\n            language={language}\n            background={background}\n            deleteCard={deleteCard}\n            id={index}\n            chartBackground={chartBackground}\n          />\n        )\n      }\n    </div>\n  );\n};\n\nCardList.propTypes = {\n  savedCards: PropTypes.arrayOf(\n    PropTypes.array,\n  ),\n  localization: PropTypes.object.isRequired,\n  language: PropTypes.string.isRequired,\n  background: PropTypes.shape({\n    color: PropTypes.string.isRequired,\n  }).isRequired,\n  deleteCard: PropTypes.func.isRequired,\n};\n\nCardList.defultProps = {\n  savedCards: [],\n};\n\nexport default CardList;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport CardList from './components/CardList/CardList';\n\nclass App extends React.Component {\n  state = {\n    lang: 'en',\n    savedCards: [],\n    key: '1c5a9a29fe1346947d780b45fcf95006',\n    background: '#FFF1FE',\n    searchNameCity: '',\n    localization: {\n      en: {\n        placeholder: 'City name...',\n        searchBitton: 'Add',\n        feelsLike: 'Feels like',\n        wind: 'Wind',\n        humidity: 'Humidity',\n        pressure: 'Pressure',\n      },\n      ua: {\n        placeholder: 'Назва міста...',\n        searchBitton: 'Додати',\n        feelsLike: 'Відчувається як',\n        wind: 'Вітер',\n        humidity: 'Вологість',\n        pressure: 'Тиск',\n      },\n      ru: {\n        placeholder: 'Имя города...',\n        searchBitton: 'Добавить',\n        feelsLike: 'Чувствуется как',\n        wind: 'Ветер',\n        humidity: 'Влажность',\n        pressure: 'Давление',\n      },\n    },\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  loadData = () => {\n    if (JSON.parse(localStorage.getItem('savedCards')) === null) {\n      fetch('https://geolocation-db.com/json/')\n      .then(response => response.json())\n      .then((result) => {\n        this.setState({ location: result });\n      }) \n      .then(() => {\n        this.loadWhether(this.state.location.city);\n      });\n    } else {\n      this.setState({\n        savedCards: JSON.parse(localStorage.getItem('savedCards')),\n      });\n    }\n\n    if (!!localStorage.getItem('lang')) {\n      this.setState({\n        lang: localStorage.getItem('lang'),\n      });\n    }\n  }\n\n  loadWhether = (city) => {\n    // eslint-disable-next-line max-len\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${this.state.key}`)\n      .then(response => response.json())\n      .then((result) => {\n        (result.cod === 200) &&\n        this.setState(state => ({\n          whether: result,\n          savedCards: [result, ...state.savedCards],\n        }));\n      })\n      .then(() => {\n        localStorage.setItem('savedCards', JSON.stringify(this.state.savedCards));\n      });\n  }\n\n  changeLanguage = (e) => {\n    this.setState({ lang: e.target.value });\n    localStorage.setItem('lang', e.target.value);\n  }\n\n  setBackgroundCard = (background) => {\n    return () => {\n      this.setState({\n        background,\n      });\n    }\n  }\n\n  setBackgroundChart = (chartBackground) => {\n    return () => {\n      this.setState({\n        chartBackground,\n      });\n    }\n  }\n\n  setSearchNameCity = (e) => {\n    this.setState({\n      searchNameCity: e,\n    });\n  }\n\n  addCard = () => {\n    this.loadWhether(this.state.searchNameCity);\n    this.setState({\n      searchNameCity: '',\n    });\n  }\n\n  deleteCard = (id) => {\n    return () => {\n      const editedList = this.state.savedCards.filter((_, index) => {\n        return id !== index;\n      });\n      this.setState({\n        savedCards: editedList\n      });\n      localStorage.setItem('savedCards', JSON.stringify(editedList));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          localization={this.state.localization}\n          setSearchNameCity={this.setSearchNameCity}\n          searchNameCity={this.state.searchNameCity}\n          addCard={this.addCard}\n          setBackgroundCard={this.setBackgroundCard}\n          changeLanguage={this.changeLanguage}\n          lang={this.state.lang}\n        />\n        <CardList\n          savedCards={this.state.savedCards}\n          localization={this.state.localization}\n          language={this.state.lang}\n          background={this.state.background}\n          deleteCard={this.deleteCard}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}