{"version":3,"sources":["components/SelectLanguage/SelectLanguage.jsx","components/Palette/Palette.jsx","components/SearchField/SearchField.jsx","components/Header/Header.jsx","components/WeatherChart/WeatherChart.jsx","components/WeatherCard/WeatherCard.jsx","components/CardList/CardList.jsx","App.js","index.js"],"names":["SelectLanguage","changeLanguage","lang","className","onChange","value","Palette","setBackgroundCard","map","color","index","onClick","SearchField","setSearchNameCity","localization","autocompleted","style","width","Autocomplete","freeSolo","event","id","disableClearable","options","option","onInputChange","target","renderInput","params","TextField","label","placeholder","margin","variant","InputProps","type","Header","addCard","searchNameCity","searchButton","WeatherChart","props","chart","xaxis","categories","fill","colors","averageTemp","series","name","data","height","WeatherCard","weather","language","background","deleteCard","useState","temperatureSystem","changeSystem","main","Object","assign","weatherDetails","sys","wind","temp_max","temp_min","convertToFarengate","Kelvin","Math","round","toString","convertToCelsy","celsy","country","src","icon","alt","description","result","date","Date","getDay","getDate","getMonth","getHours","getMinutes","getActualDate","temp","href","feelsLike","feels_like","speed","humidity","pressure","defaultProps","CardList","savedCards","chartBackground","card","defultProps","App","state","key","en","ua","ru","loadData","JSON","parse","localStorage","getItem","fetch","then","response","json","setState","location","loadWeather","city","cod","includes","setItem","stringify","e","setBackgroundChart","editedList","filter","_","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fb8298e.chunk.js","sourcesContent":["import React from 'react';\nimport './SelectLanguage.scss';\n\nconst SelectLanguage = ({\n  changeLanguage,\n  lang,\n}) => {\n  return (\n    <select\n      className=\"SelectLanguage\"\n      onChange={changeLanguage}\n      value={lang}\n    >\n      <option value=\"en\">\n        EN\n      </option>\n      <option value=\"ua\">\n        UA\n      </option>\n      <option value=\"ru\">\n        RU\n      </option>\n    </select>\n  );\n}\n\nexport default SelectLanguage;\n","import React from 'react';\nimport './Palette.scss';\n\nconst Palette = ({ setBackgroundCard }) => {\n  const colorsOfButtons = ['#FFF1FE', '#F1F2FF', '#459DE9', '#F2F2F2', '#C5C5C5', '#8D8D8D'];\n  return (\n    <div className=\"Palette\">\n      Palette:\n      {\n        colorsOfButtons.map((color, index) => (\n          <button\n            key={`button${index}`}\n            className=\"Palette__buttons\"\n            onClick={setBackgroundCard({color})}\n          ></button>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default Palette;","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nexport default function SearchField({\n  setSearchNameCity,\n  localization,\n  autocompleted,\n }) {\n  return (\n    <div style={{ width: 300 }}>\n      <Autocomplete\n        freeSolo\n        onChange={(event, value) => {\n          setSearchNameCity(value);\n        }}\n        id=\"free-solo-2-demo\"\n        disableClearable\n        options={autocompleted.map(option => option)}\n        onInputChange={(event) => {\n          setSearchNameCity(event.target.value);\n        }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={localization.placeholder}\n            margin=\"none\"\n            variant=\"outlined\"\n            InputProps={{ ...params.InputProps, type: \"search\" }}\n          />\n        )}\n      />\n    </div>\n  );\n}","import React from 'react';\nimport './Header.scss';\nimport SelectLanguage from '../SelectLanguage/SelectLanguage';\nimport Palette from '../Palette/Palette';\nimport SearchField from '../SearchField/SearchField';\n\nconst Header = ({\n  localization,\n  setSearchNameCity,\n  addCard,\n  setBackgroundCard,\n  changeLanguage,\n  lang,\n  autocompleted,\n  searchNameCity\n}) => {\n  return (\n    <div className=\"Header\">\n      <div className=\"Header__search\">\n        <SearchField\n          setSearchNameCity={setSearchNameCity}\n          localization={localization}\n          autocompleted={autocompleted}\n        />\n        <button\n          className=\"Header__searchButton\"\n          type=\"button\"\n          onClick={addCard}\n        >\n          {localization.searchButton}\n        </button>\n      </div>\n      <div className=\"Header__modificators\">\n        <Palette\n          setBackgroundCard={setBackgroundCard}\n        />\n\n        <SelectLanguage\n          changeLanguage={changeLanguage}\n          lang={lang}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Chart from \"react-apexcharts\";\n\nconst WeatherChart = (props) => {\n  const options = {\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00']\n    },\n    fill: {\n      colors: props.averageTemp > 0 ? \"red\" : \"blue\",\n    }\n  };\n\n  const series = [\n    {\n      name: \"Temperature\",\n      data: [5, 7, 10, 11, 15, 8, 10, 9]\n    }\n  ];\n\nreturn (\n    <div className=\"app\">\n      <div className=\"row\">\n        <div className=\"mixed-chart\">\n          <Chart\n            options={options}\n            series={series}\n            type=\"area\"\n            width=\"300\"\n            height=\"150\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherChart;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './WeatherCard.scss';\nimport WeatherChart from '../WeatherChart/WeatherChart';\n\nconst WeatherCard = ({\n  weather,\n  localization,\n  language,\n  background,\n  deleteCard,\n  id,\n}) => {\n  const [temperatureSystem, changeSystem] = useState('c');\n  const main = Object.assign({}, weather.main);\n  const weatherDetails = Object.assign({}, weather.weather);\n  const sys = Object.assign({}, weather.sys);\n  const wind = Object.assign({}, weather.wind);\n  const averageTemp = (main.temp_max + main.temp_min) / 2;\n\n  const convertToFarengate = (Kelvin) => {\n    return Math.round(Kelvin * 9 / 5 - 459.67).toString();\n  };\n\n  const convertToCelsy = (Kelvin) => {\n    const celsy = Math.round(Kelvin - 273.15).toString();\n\n    return (celsy > 0) ? `+${celsy}` : celsy;\n  };\n\n  const getActualDate = () => {\n    const date = new Date();\n    let result;\n\n    switch (date.getDay()) {\n      case 0: result = 'Mon'; break;\n      case 1: result = 'Tue'; break;\n      case 2: result = 'Wed'; break;\n      case 3: result = 'Thi'; break;\n      case 4: result = 'Fri'; break;\n      case 5: result = 'Sat'; break;\n      case 6: result = 'Sun'; break;\n      default: break;\n    }\n\n    result += `, ${date.getDate()} `;\n\n    switch (date.getMonth()) {\n      case 0: result += 'January'; break;\n      case 1: result += 'February'; break;\n      case 2: result += 'March'; break;\n      case 3: result += 'April'; break;\n      case 4: result += 'May'; break;\n      case 5: result += 'June'; break;\n      case 6: result += 'Jule'; break;\n      case 7: result += 'August'; break;\n      case 8: result += 'September'; break;\n      case 9: result += 'October'; break;\n      case 10: result += 'November'; break;\n      case 11: result += 'December'; break;\n      default: break;\n    }\n\n    result += `, ${date.getHours()}:${date.getMinutes()}`;\n\n    return result;\n  };\n\n  return (\n    <div className=\"WeatherCard\" style={{ background: background }}>\n      <div className=\"WeatherCard__header\">\n        <div className=\"WeatherCard__city\">\n          {`${weather.name}, ${sys.country}`}\n        </div>\n        <div className=\"WeatherCard__iconWeather\">\n          <img\n            className=\"WeatherCard__icon\"\n            src={`http://openweathermap.org/img/wn/${weatherDetails[0].icon}@2x.png`}\n            alt=\"weatherIcon\"\n          />\n          <div className=\"WeatherCard__weatherDescription\">\n            {weatherDetails[0].description}\n          </div>\n          <button\n            className=\"WeatherCard__deleteCard\"\n            onClick={deleteCard(id)}\n          >\n            {`x`}\n          </button>\n        </div>\n      </div>\n      <div className=\"WeatherCard__date\">\n        {getActualDate()}\n      </div>\n      <div className=\"WeatherCard__chart\">\n        <WeatherChart\n          averageTemp={convertToCelsy(averageTemp)}\n        />\n      </div>\n      <div className=\"WeatherCard__templine\">\n        <div className=\"WeatherCard__tempcontainer\">\n          <div className=\"WeatherCard__tempToggle\">\n            {\n              temperatureSystem === 'c'\n                ? (\n                  <span className=\"WeatherCard__temp\">\n                    {\n                      convertToCelsy(main.temp)\n                    }\n                  </span>\n                )\n                : (\n                  <span className=\"WeatherCard__temp\">\n                    {\n                      convertToFarengate(main.temp)\n                    }\n                  </span>\n                )\n            }\n            <span\n              href=\"#1\"\n              className={\n                temperatureSystem === 'c'\n                  ? 'WeatherCard__temptype-active'\n                  : 'WeatherCard__temptype'\n              }\n              onClick={() => {\n                changeSystem('c');\n              }}\n            >\n              ℃\n            </span>\n            {` | `}\n            <span\n              href=\"#1\"\n              className={\n                temperatureSystem === 'f'\n                  ? 'WeatherCard__temptype-active'\n                  : 'WeatherCard__temptype'\n              }\n              onClick={() => {\n                changeSystem('f');\n              }}\n            >\n              ℉\n            </span>\n          </div>\n          <div className=\"WeatherCard__feelslike\">\n            {\n              temperatureSystem === 'c'\n                ? `${localization[language].feelsLike} ${\n                  convertToCelsy(main.feels_like)\n                }℃`\n                : `${localization[language].feelsLike} ${\n                  convertToFarengate(main.feels_like)\n                }℉`\n            }\n          </div>\n        </div>\n        <div>\n          <div className=\"WeatherCard__additional\">\n            <div>\n              {`${localization[language].wind}: `}\n              <b className=\"WeatherCard__additional-blue\">{`${wind.speed} m/s`}</b>\n            </div>\n            <div>\n              {`${localization[language].humidity}:`}\n              <b className=\"WeatherCard__additional-blue\">{` ${main.humidity}`}</b>\n            </div>\n            <div>\n              {`${localization[language].pressure}:`}\n              <b className=\"WeatherCard__additional-blue\">{` ${main.pressure}`}</b>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nWeatherCard.propTypes = {\n  weather: PropTypes.object.isRequired,\n  localization: PropTypes.object.isRequired,\n  language: PropTypes.string.isRequired,\n  background: PropTypes.string,\n  deleteCard: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nWeatherCard.defaultProps = {\n  background: '#FFF1FE',\n};\n\nexport default WeatherCard;\n","import React from 'react';\nimport './CardList.scss';\nimport PropTypes from 'prop-types';\nimport WeatherCard from '../WeatherCard/WeatherCard';\n\nconst CardList = ({\n  savedCards,\n  localization,\n  language,\n  background,\n  deleteCard,\n  chartBackground,\n}) => {\n  return (\n    <div className=\"CardList\">\n      {\n        savedCards.map((card, index) =>\n          <WeatherCard\n            key={index}\n            weather={card}\n            localization={localization}\n            background={background}\n            deleteCard={deleteCard}\n            id={index}\n            language={language}\n            chartBackground={chartBackground}\n          />\n        )\n      }\n    </div>\n  );\n};\n\nCardList.propTypes = {\n  savedCards: PropTypes.arrayOf(\n    PropTypes.object,\n  ),\n  localization: PropTypes.object.isRequired,\n  language: PropTypes.string.isRequired,\n  background: PropTypes.string,\n  deleteCard: PropTypes.func.isRequired,\n};\n\nCardList.defultProps = {\n  savedCards: [],\n  background: '#FFF1FE',\n};\n\nexport default CardList;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport CardList from './components/CardList/CardList';\n\nclass App extends React.Component {\n  state = {\n    lang: 'en',\n    savedCards: [],\n    autocompleted: [],\n    key: '1c5a9a29fe1346947d780b45fcf95006',\n    background: '#FFF1FE',\n    searchNameCity: '',\n    localization: {\n      en: {\n        placeholder: 'City name...',\n        searchButton: 'Add',\n        feelsLike: 'Feels like',\n        wind: 'Wind',\n        humidity: 'Humidity',\n        pressure: 'Pressure',\n      },\n      ua: {\n        placeholder: 'Назва міста...',\n        searchButton: 'Додати',\n        feelsLike: 'Відчувається як',\n        wind: 'Вітер',\n        humidity: 'Вологість',\n        pressure: 'Тиск',\n      },\n      ru: {\n        placeholder: 'Имя города...',\n        searchButton: 'Добавить',\n        feelsLike: 'Чувствуется как',\n        wind: 'Ветер',\n        humidity: 'Влажность',\n        pressure: 'Давление',\n      },\n    },\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  loadData = () => {\n    if (JSON.parse(localStorage.getItem('savedCards')) === null) {\n      fetch('https://geolocation-db.com/json/')\n      .then(response => response.json())\n      .then((result) => {\n        this.setState({ location: result });\n      }) \n      .then(() => {\n        this.loadWeather(this.state.location.city);\n      });\n    } else {\n      this.setState({\n        savedCards: JSON.parse(localStorage.getItem('savedCards')),\n      });\n    }\n\n    if (!!localStorage.getItem('lang')) {\n      this.setState({\n        lang: localStorage.getItem('lang'),\n      });\n    }\n\n    if (!!localStorage.getItem('autocompleted')) {\n      this.setState({\n        autocompleted: JSON.parse(localStorage.getItem('autocompleted')),\n      });\n    }\n  }\n\n  loadWeather = (city) => {\n    // eslint-disable-next-line max-len\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${this.state.key}`)\n      .then(response => response.json())\n      .then((result) => {\n        if (result.cod === 200) {\n          this.setState(state => ({\n            weather: result,\n            savedCards: [result, ...state.savedCards],\n          }));\n        }\n\n        if (\n          !this.state.autocompleted.includes(result.name)\n          && (result.cod === 200)\n          && (result.name !== null)\n        ) {\n          this.setState(state => ({\n            autocompleted: [...state.autocompleted, result.name],\n          }));\n        }\n      })\n      .then(() => {\n        localStorage.setItem(\n          'savedCards', JSON.stringify(this.state.savedCards)\n        );\n        localStorage.setItem(\n          'autocompleted', JSON.stringify(this.state.autocompleted)\n        );\n      });\n  }\n\n  changeLanguage = (e) => {\n    this.setState({ lang: e.target.value });\n    localStorage.setItem('lang', e.target.value);\n  }\n\n  setBackgroundCard = (background) => {\n    return () => {\n      this.setState({\n        background,\n      });\n    }\n  }\n\n  setBackgroundChart = (chartBackground) => {\n    return () => {\n      this.setState({\n        chartBackground,\n      });\n    }\n  }\n\n  setSearchNameCity = (e) => {\n    this.setState({\n      searchNameCity: e,\n    });\n  }\n\n  addCard = () => {\n    this.loadWeather(this.state.searchNameCity);\n    this.setState({\n      searchNameCity: '',\n    });\n  }\n\n  deleteCard = (id) => {\n    return () => {\n      const editedList = this.state.savedCards.filter((_, index) => {\n        return id !== index;\n      });\n\n      this.setState({\n        savedCards: editedList\n      });\n\n      localStorage.setItem(\n        'savedCards', JSON.stringify(editedList)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          localization={this.state.localization[this.state.lang]}\n          setSearchNameCity={this.setSearchNameCity}\n          addCard={this.addCard}\n          setBackgroundCard={this.setBackgroundCard}\n          changeLanguage={this.changeLanguage}\n          lang={this.state.lang}\n          autocompleted={this.state.autocompleted}\n        />\n        <CardList\n          savedCards={this.state.savedCards}\n          localization={this.state.localization}\n          language={this.state.lang}\n          background={this.state.background.color}\n          deleteCard={this.deleteCard}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}